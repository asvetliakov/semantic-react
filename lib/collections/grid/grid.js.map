{"version":3,"sources":["../../../src/components/collections/grid/grid.jsx"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAM,aAAa;AACf,aAAS,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,CAAT;AACA,YAAQ,CAAC,YAAD,CAAR;AACA,aAAS,CAAC,YAAD,EAAe,YAAf,CAAT;AACA,YAAQ,CAAC,cAAD,EAAiB,YAAjB,CAAR;AACA,aAAS,CAAC,MAAD,CAAT;AACA,cAAU,CAAC,QAAD,EAAW,mBAAX,EAAgC,QAAhC,EAA0C,mBAA1C,EAA+D,UAA/D,EAA2E,qBAA3E,CAAV;AACA,cAAU,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,CAAV;CAPE;;AAUN,SAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC1B,QAAI,UAAU;;AAEV,YAAI,MAAM,cAAN;AACJ,cAAM,MAAM,cAAN;;;AAGN,mBAAW,MAAM,SAAN;AACX,iBAAS,MAAM,OAAN;AACT,kBAAU,MAAM,QAAN;AACV,mBAAW,MAAM,SAAN;AACX,kBAAU,MAAM,QAAN;KAVV,CADsB;;AAc1B,QAAI,MAAM,OAAN,IAAiB,MAAM,OAAN,GAAgB,CAAhB,IAAqB,MAAM,OAAN,IAAiB,EAAjB,EAAqB;AAC3D,gBAAW,mBAAQ,MAAM,OAAN,aAAnB,IAA8C,IAA9C,CAD2D;KAA/D;;AAIA,QAAI,MAAM,KAAN,EAAa;AACb,gBAAQ,aAAR,IAAyB,IAAzB,CADa;KAAjB;;AAIA,WAAO,mCAAmB,OAAnB,EAA4B,KAA5B,EAAmC,UAAnC,EAA+C,EAAE,UAAU,SAAV,EAAjD,CAAP,CAtB0B;CAA9B;;;;;;;;AA+BA,IAAI,OAAO,SAAP,IAAO,CAAC,KAAD,EAAW;;;QAId,UAGA,MAHA,QAJc;QAIL,iBAGT,MAHS,eAJK;QAIW,WAGzB,MAHyB,SAJX;QAIqB,SAGnC,MAHmC,OAJrB;QAI6B,UAG3C,MAH2C,QAJ7B;QAIsC,YAGpD,MAHoD,UAJtC;QAIiD,YAG/D,MAH+D,UAJjD;QAI4D,WAG1E,MAH0E,SAJ5D;QAKd,UAEA,MAFA,QALc;QAKL,WAET,MAFS,SALK;QAKK,QAEnB,MAFmB,MALL;QAKY,SAE1B,MAF0B,OALZ;QAKoB,UAElC,MAFkC,QALpB;QAK6B,WAE3C,MAF2C,SAL7B;QAKuC,YAErD,MAFqD,UALvC;QAKkD,WAEhE,MAFgE,SALlD;;QAMX,iCACH;;AAPc;;AASlB,QAAM,YAAY,SAAZ,CATY;AAUlB,UAAM,SAAN,GAAkB,0BAAW,MAAM,SAAN,EAAiB,cAAc,KAAd,CAA5B,CAAlB,CAVkB;AAWlB,WACI;AAAC,iBAAD;QACQ,KADR;QAGK,QAHL;KADJ,CAXkB;CAAX;;AA0FX,KAAK,YAAL,gBACO,uBAAa,YAAb,CADP;;kBAIe","file":"grid.js","sourcesContent":["import React from 'react';\nimport { Numbers, validateClassProps } from '../../utilities';\nimport DefaultProps from '../../defaultProps';\nimport classNames from 'classnames';\n\nconst validProps = {\n    aligned: ['right', 'left', 'center'],\n    celled: ['internally'],\n    divided: ['vertically', 'internally'],\n    padded: ['horizontally', 'vertically'],\n    relaxed: ['very'],\n    reversed: ['mobile', 'mobile vertically', 'tablet', 'tablet vertically', 'computer', 'computer vertically'],\n    valigned: ['top', 'middle', 'bottom']\n};\n\nfunction getClassNames(props) {\n    let classes = {\n        // Default\n        ui: props.defaultClasses,\n        grid: props.defaultClasses,\n        \n        // variations\n        container: props.container,\n        relaxed: props.relaxed,\n        centered: props.centered,\n        stackable: props.stackable,\n        doubling: props.doubling\n    };\n\n    if (props.columns && props.columns > 0 && props.columns <= 16) {\n        classes[`${Numbers[props.columns]} column`] = true;\n    }\n    \n    if (props.equal) {\n        classes['equal width'] = true;\n    }\n    \n    return validateClassProps(classes, props, validProps, { valigned: 'aligned' });\n}\n\n/**\n * Semantic Grid\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nlet Grid = (props) => {\n    // consume props\n    /* eslint-disable no-use-before-define */\n    let {\n        aligned, defaultClasses, centered, celled, columns, container, component, children,\n        divided, doubling, equal, padded, relaxed, reversed, stackable, valigned,\n        ...other\n    } = props;\n    /* eslint-enable no-use-before-define */\n    const Component = component;\n    other.className = classNames(other.className, getClassNames(props));\n    return (\n        <Component \n            {...other} \n        >\n            {children}\n        </Component>\n    );\n};\n\nGrid.propTypes = {\n    ...DefaultProps.propTypes,\n    /**\n     * Horizontal content alignment\n     */\n    aligned: React.PropTypes.oneOf(['right', 'left', 'center']),\n    /**\n     * Center columns\n     */\n    centered: React.PropTypes.bool,\n    /**\n     * Divide rows into cells\n     */\n    celled: React.PropTypes.oneOfType([\n        React.PropTypes.oneOf(['internally']),\n        React.PropTypes.bool\n    ]),\n    /**\n     * Grid column count\n     */\n    columns: React.PropTypes.number,\n    /**\n     * Add container class, i.e. ui grid container\n     */\n    container: React.PropTypes.bool,\n    /**\n     * Add dividers between ros\n     */\n    divided: React.PropTypes.oneOfType([\n        React.PropTypes.oneOf(['vertically', 'internally']),\n        React.PropTypes.bool\n    ]),\n    /**\n     * Double column width on tablet and mobile sizes\n     */\n    doubling: React.PropTypes.bool,\n    /**\n     * Automatically resize elements to split the available width evently\n     */\n    equal: React.PropTypes.bool,\n    /**\n     * Preserve gutters on first and las columns\n     */\n    padded: React.PropTypes.oneOfType([\n        React.PropTypes.oneOf(['horizontally', 'vertically']),\n        React.PropTypes.bool\n    ]),\n    /**\n     * Increase size of gutters\n     */\n    relaxed: React.PropTypes.oneOfType([\n        React.PropTypes.oneOf(['very']),\n        React.PropTypes.bool\n    ]),\n    /**\n     * Reverse the order of columns or rows by device\n     */\n    reversed: React.PropTypes.oneOfType([\n        'mobile', 'mobile vertically', 'tablet', 'tablet vertically', 'computer', 'computer vertically'\n    ]),\n    /**\n     * Automatically stack rows into single columns on mobile devices\n     */\n    stackable: React.PropTypes.bool,\n    /**\n     * Vertical content alignment\n     */\n    valigned: React.PropTypes.oneOf(['top', 'middle', 'bottom'])\n};\n\nGrid.defaultProps = {\n    ...DefaultProps.defaultProps\n};\n\nexport default Grid;\n"]}