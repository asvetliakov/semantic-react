{"version":3,"sources":["../../../src/components/elements/button/button.jsx"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,IAAM,aAAa;AACf,YAAU,CAAC,UAAD,EAAa,MAAb,CAAV;AACA,YAAU,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4B,KAA5B,CAAV;AACA,WAAS,CAAC,MAAD,EAAS,OAAT,CAAT;CAHE;;;;;;;AAWN,SAAS,UAAT,CAAoB,KAApB,EAA2B,OAA3B,EAAoC;AAChC,MAAI,UAAU;;AAEV,QAAI,MAAM,cAAN;;;AAGJ,aAAS,MAAM,OAAN;AACT,cAAU,MAAM,QAAN;;;AAGV,cAAU,MAAM,QAAN;AACV,WAAO,MAAM,KAAN;AACP,cAAU,MAAM,QAAN;;;AAGV,cAAU,MAAM,QAAN;AACV,aAAS,MAAM,OAAN;AACT,WAAO,MAAM,KAAN;;;AAGP,YAAQ,MAAM,cAAN;GAnBR;;;AAD4B,SAwBhC,CAAQ,MAAM,KAAN,CAAR,GAAuB,CAAC,CAAC,MAAM,KAAN,CAxBO;AAyBhC,UAAQ,MAAM,IAAN,CAAR,GAAsB,CAAC,CAAC,MAAM,IAAN,CAzBQ;AA0BhC,UAAQ,MAAM,MAAN,CAAR,GAAwB,CAAC,CAAC,MAAM,MAAN,CA1BM;AA2BhC,UAAQ,MAAM,QAAN,CAAR,GAA0B,CAAC,CAAC,MAAM,QAAN,CA3BI;AA4BhC,UAAQ,MAAM,KAAN,CAAR,GAAuB,CAAC,CAAC,MAAM,KAAN,CA5BO;;AA8BhC,SAAO,mCAAmB,OAAnB,EAA4B,KAA5B,EAAmC,UAAnC,CAAP,CA9BgC;CAApC;;;;;AAoCA,IAAI,SAAS,SAAT,MAAS,CAAC,KAAD,EAAQ,OAAR,EAAoB;;MAEvB,WAIF,MAJE,SAFuB;MAEb,WAIZ,MAJY,SAFa;MAEH,QAItB,MAJsB,MAFG;MAEI,WAI7B,MAJ6B,SAFJ;MAEc,WAIvC,MAJuC,SAFd;MAEwB,QAIjD,MAJiD,MAFxB;MAE+B,YAIxD,MAJwD,UAF/B;MAGzB,UAGA,MAHA,QAHyB;MAGhB,iBAGT,MAHS,eAHgB;MAGA,WAGzB,MAHyB,SAHA;MAGU,UAGnC,MAHmC,QAHV;MAGmB,QAG5C,MAH4C,MAHnB;MAIzB,WAEA,MAFA,SAJyB;MAIf,OAEV,MAFU,KAJe;MAIT,QAEhB,MAFgB,MAJS;MAIF,SAEvB,MAFuB,OAJE;;MAKtB,iCACH,4LANyB;;AAQ7B,MAAI,YAAY,QAAC,IAAY,QAAQ,UAAR,IAAsB,QAAlC,IAA8C,gBAAM,QAAN,CAAe,KAAf,CAAqB,MAAM,QAAN,CAArB,GAAuC,CAAvC,GAA4C,KAA3F,GAAmG,QAAnG,CARa;AAS7B,MAAI,SAAJ,EAAe;AACX,gBAAY,SAAZ,CADW;GAAf;;AAIA,QAAM,SAAN,GAAkB,0BAAW,MAAM,SAAN,EAAiB,WAAW,KAAX,EAAkB,OAAlB,CAA5B,CAAlB,CAb6B;;AAe7B,SACI;AAAC,aAAD;IAAe,KAAf;IACK,QADL;GADJ,CAf6B;CAApB;;;;;;;;;;AAsGb,OAAO,YAAP,GAAsB;AAClB,kBAAgB,IAAhB;CADJ;;;;;AAOA,OAAO,YAAP,GAAsB;AAClB,cAAY,gBAAM,SAAN,CAAgB,IAAhB;CADhB;;kBAIe","file":"button.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { validateClassProps } from '../../utilities';\nimport DefaultProps from './../../defaultProps';\n\nconst validProps = {\n    animated: ['vertical', 'fade'],\n    attached: ['left', 'right', 'bottom', 'top'],\n    floated: ['left', 'right']\n};\n\n/**\n * Assign button classes\n * @param props\n * @param context\n */\nfunction getClasses(props, context) {\n    let classes = {\n        // default\n        ui: props.defaultClasses,\n\n        // position based props\n        floated: props.floated,\n        attached: props.attached,\n\n        // types\n        animated: props.animated,\n        basic: props.basic,\n        inverted: props.inverted,\n\n        // variations\n        circular: props.circular,\n        compact: props.compact,\n        fluid: props.fluid,\n\n        // component\n        button: props.defaultClasses\n    };\n\n    // string types\n    classes[props.color] = !!props.color;\n    classes[props.size] = !!props.size;\n    classes[props.social] = !!props.social;\n    classes[props.emphasis] = !!props.emphasis;\n    classes[props.state] = !!props.state;\n\n    return validateClassProps(classes, props, validProps);\n}\n\n/**\n * Basic button. Icon and labeled buttons have own components\n */\nlet Button = (props, context) => {\n    // consume props\n    let { animated, attached, basic, children, circular, color, component,\n        compact, defaultClasses, emphasis, floated, fluid, \n        inverted, size, state, toggle,\n        ...other\n    } = props;\n    \n    let Component = (attached || context.isAttached || animated || React.Children.count(props.children) > 1) ? 'div' : 'button';\n    if (component) {\n        Component = component;\n    }\n    \n    other.className = classNames(other.className, getClasses(props, context));\n    \n    return (\n        <Component {...other}>\n            {children}\n        </Component>\n    );\n};\n\n/**\n * Button props\n */\nButton.propTypes = {\n    ...DefaultProps.propTypes,\n    /**\n     * Adds a fade or slide animation on hover.\n     */\n    animated: React.PropTypes.oneOfType([\n        React.PropTypes.oneOf(['fade', 'vertical']),\n        React.PropTypes.bool\n    ]),\n\n    /**\n     * It's attached to some other attachable component.\n     */\n    attached: React.PropTypes.oneOfType([\n        React.PropTypes.oneOf(['left', 'right', 'bottom', 'top']),\n        React.PropTypes.bool\n    ]),\n\n    /**\n     * Adds simple styling to the component.\n     */\n    basic: React.PropTypes.bool,\n\n    /**\n     * A button can be circular\n     */\n    circular: React.PropTypes.bool,\n\n    /**\n     * Adds a SemanticUI color class.\n     */\n    color: React.PropTypes.string,\n\n    /**\n     * Reduces the padding on the component.\n     */\n    compact: React.PropTypes.bool,\n\n    /**\n     * A button can be formatted to show different levels of emphasis\n     */\n    emphasis: React.PropTypes.oneOf(['primary', 'secondary', 'positive', 'negative']),\n\n    /**\n     * Forces to component to float left or right.\n     */\n    floated: React.PropTypes.oneOf(['left', 'right']),\n\n    /**\n     * The component fills the parent components horizontal space.\n     */\n    fluid: React.PropTypes.bool,\n\n    /**\n     * Styles the component for a dark background.\n     */\n    inverted: React.PropTypes.bool,\n\n    /**\n     * Adds a SemanticUI size class.\n     */\n    size: React.PropTypes.oneOf(['mini', 'tiny', 'small', 'medium', 'large', 'big', 'huge', 'massive']),\n\n    /**\n     * Indicates whether the button is currently highlighted or disabled.\n     */\n    state: React.PropTypes.oneOf(['active', 'disabled', 'loading']),\n\n    /**\n     * A button can be formatted to toggle on and off\n     */\n    toggle: React.PropTypes.bool\n};\n\n/**\n * Default props\n */\nButton.defaultProps = {\n    defaultClasses: true\n};\n\n/**\n * Context types\n */\nButton.contextTypes = {\n    isAttached: React.PropTypes.bool\n};\n\nexport default Button;\n"]}