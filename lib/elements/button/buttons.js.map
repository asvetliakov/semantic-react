{"version":3,"sources":["../../../src/components/elements/button/buttons.jsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA,IAAI,aAAa;AACb,cAAU,CAAC,QAAD,EAAW,KAAX,CAAV;AACA,aAAS,CAAC,OAAD,EAAU,MAAV,CAAT;;AAFa,CAAb;;;;;IASiB;;;;;;;;;;;0CAyDC;AACd,mBAAO;AACH,4BAAY,CAAC,CAAC,KAAK,KAAL,CAAW,QAAX;aADlB,CADc;;;;iCAMT;;yBAIwB,KAAK,KAAL,CAJxB;gBAEC,2BAFD;gBAEW,qBAFX;gBAEkB,2BAFlB;gBAE4B,6BAF5B;gBAEuC,qBAFvC;gBAE8C,yBAF9C;gBAEuD,6BAFvD;gBAGC,uCAHD;gBAGiB,qBAHjB;gBAGwB,yBAHxB;gBAGiC,2BAHjC;gBAG2C,mBAH3C;gBAIC,2BAJD;;gBAIc;;;AAJd,iBAOL,CAAM,SAAN,GAAkB,0BAAW,KAAK,KAAL,CAAW,SAAX,EAAsB,KAAK,UAAL,EAAjC,CAAlB,CAPK;;AASL,mBAAO,gBAAM,aAAN,CACH,KAAK,KAAL,CAAW,SAAX,EACA,KAFG,EAGH,KAAK,KAAL,CAAW,QAAX,CAHJ,CATK;;;;qCAgBI;AACT,gBAAI,UAAU;;AAEV,oBAAI,KAAK,KAAL,CAAW,cAAX;;;AAGJ,uBAAO,KAAK,KAAL,CAAW,KAAX;AACP,0BAAU,KAAK,KAAL,CAAW,QAAX;;;AAGV,0BAAU,KAAK,KAAL,CAAW,QAAX;AACV,yBAAS,KAAK,KAAL,CAAW,OAAX;AACT,0BAAU,KAAK,KAAL,CAAW,QAAX;;;AAGV,yBAAS,KAAK,KAAL,CAAW,cAAX;aAdT,CADK;;AAkBT,gBAAI,aAAa,gBAAM,QAAN,CAAe,KAAf,CAAqB,KAAK,KAAL,CAAW,QAAX,CAAlC;;;AAlBK,gBAqBL,KAAK,KAAL,CAAW,KAAX,EAAkB;AAClB,oBAAI,aAAa,CAAb,IAAmB,cAAc,EAAd,EAAkB;AACrC,4BAAQ,mBAAQ,UAAR,CAAR,IAA+B,IAA/B,CADqC;iBAAzC,MAEO;AACH,4BAAQ,OAAR,IAAmB,IAAnB,CADG;iBAFP;aADJ;;AAQA,oBAAQ,KAAK,KAAL,CAAW,KAAX,CAAR,GAA4B,CAAC,CAAC,KAAK,KAAL,CAAW,KAAX,CA7BrB;AA8BT,oBAAQ,KAAK,KAAL,CAAW,IAAX,CAAR,GAA2B,CAAC,CAAC,KAAK,KAAL,CAAW,IAAX,CA9BpB;;AAgCT,mBAAO,mCAAmB,OAAnB,EAA4B,KAAK,KAAL,EAAY,UAAxC,CAAP,CAhCS;;;;WA/EI;EAAgB,gBAAM,SAAN,UAiD1B,oBAAoB;AACvB,gBAAY,gBAAM,SAAN,CAAgB,IAAhB;UAGT,4BACA,uBAAa,YAAb;kBAtDU","file":"buttons.js","sourcesContent":["import React from 'react';\nimport { Numbers, validateClassProps } from '../../utilities';\nimport classNames from 'classnames';\nimport DefaultProps from '../../defaultProps';\n\nlet validProps = {\n    attached: ['bottom', 'top'],\n    floated: ['right', 'left']\n    // No 'size' here to avoid validateClassProps() picking it up and adding classes\n};\n\n/**\n * Group of buttons\n */\nexport default class Buttons extends React.Component {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * It's attached to some other attachable component.\n         */\n        attached: React.PropTypes.oneOf(['bottom', 'top']),\n\n        /**\n         * Adds simple styling to the component.\n         */\n        basic: React.PropTypes.bool,\n\n        /**\n         * Adds a SemanticUI color class.\n         */\n        color: React.PropTypes.string,\n\n        /**\n         * Reduces the padding on the component.\n         */\n        compact: React.PropTypes.bool,\n\n        /**\n         * Forces all children to an equal width.\n         */\n        equal: React.PropTypes.bool,\n\n        /**\n         * Forces to component to float left or right.\n         */\n        floated: React.PropTypes.oneOf(['left', 'right']),\n\n        /**\n         * Styles the component for a dark background.\n         */\n        inverted: React.PropTypes.bool,\n\n        /**\n         * Adds a SemanticUI size class.\n         */\n        size: React.PropTypes.oneOf(['mini', 'tiny', 'small', 'medium', 'large', 'big', 'huge', 'massive']),\n\n        /**\n         * Forces child components to render vertically.\n         */\n        vertical: React.PropTypes.bool\n    };\n\n    static childContextTypes = {\n        isAttached: React.PropTypes.bool\n    };\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps\n    };\n\n    getChildContext() {\n        return {\n            isAttached: !!this.props.attached\n        };\n    }\n\n    render() {\n        /* eslint-disable no-use-before-define */\n        let { attached, basic, children, className, color, compact, component,\n              defaultClasses, equal, floated, inverted, size,\n              vertical, ...other } = this.props;\n        /* eslint-enable no-use-before-define */\n\n        other.className = classNames(this.props.className, this.getClasses());\n\n        return React.createElement(\n            this.props.component,\n            other,\n            this.props.children\n        );\n    }\n\n    getClasses() {\n        let classes = {\n            // default\n            ui: this.props.defaultClasses,\n\n            // types\n            basic: this.props.basic,\n            inverted: this.props.inverted,\n\n            // variations\n            attached: this.props.attached,\n            compact: this.props.compact,\n            vertical: this.props.vertical,\n\n            // component\n            buttons: this.props.defaultClasses\n        };\n\n        let childCount = React.Children.count(this.props.children);\n\n        // buttons group with >0 buttons that are all of equal width\n        if (this.props.equal) {\n            if (childCount > 1  && childCount <= 12) {\n                classes[Numbers[childCount]] = true;\n            } else {\n                classes['fluid'] = true;\n            }\n        }\n\n        classes[this.props.color] = !!this.props.color;\n        classes[this.props.size] = !!this.props.size;\n\n        return validateClassProps(classes, this.props, validProps);\n    }\n}\n"]}