{"version":3,"sources":["../../../src/components/elements/button/labeledbutton.jsx"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAM,aAAa;AACf,aAAS,CAAC,MAAD,EAAS,OAAT,CAAT;CADE;;;;;;AAQN,SAAS,wBAAT,CAAkC,IAAlC,EAAwC;AACpC,WAAO,IAAC,KAAS,MAAT,GAAmB,cAAc,UAAd,CAAyB,IAAzB,GAAgC,cAAc,UAAd,CAAyB,KAAzB;AADvB,CAAxC;;;;;;AAQA,SAAS,UAAT,CAAoB,KAApB,EAA2B;AACvB,QAAI,UAAU;AACV,YAAI,MAAM,SAAN,KAAoB,MAApB;AACJ,cAAM,MAAM,SAAN,KAAoB,MAApB;AACN,gBAAQ,MAAM,SAAN,KAAoB,MAApB;KAHR,CADmB;AAMvB,WAAO,mCAAmB,OAAnB,EAA4B,KAA5B,EAAmC,UAAnC,CAAP,CANuB;CAA3B;;;;;AAYA,IAAI,gBAAgB,SAAhB,aAAgB,CAAC,KAAD,EAAW;QACnB,WAAkE,MAAlE,SADmB;QACT,UAAwD,MAAxD,QADS;QACA,YAA+C,MAA/C,UADA;QACW,QAAoC,MAApC,MADX;QACkB,iBAA6B,MAA7B,eADlB;;QACqC,iCAAU,wEAD/C;;AAE3B,QAAI,iBAAiB,iBAAmB,cAAnB,GAAoC,yBAAyB,SAAzB,CAApC,CAFM;;AAK3B,QAAI,cAAc,MAAd,EAAsB;;AAEtB,cAAM,SAAN,GAAkB,0BAAW,MAAM,SAAN,EAAiB,WAAW,KAAX,CAA5B,CAAlB,CAFsB;AAGtB,eACI;AAAC,0BAAc,WAAW,MAA1B;YAAqC,KAArC;YACI,8BAAC,cAAD,IAAgB,MAAM,KAAN,EAAhB,CADJ;YAEK,QAFL;SADJ,CAHsB;KAA1B,MASO;;AAEH,YAAM,YAAY,0BAAW,WAAW,KAAX,CAAX,CAAZ,CAFH;AAGH,YAAI,SAAS,EAAT;;;AAHD,YAMC,YAAY,MAAZ,EAAoB;AACpB,mBAAO,IAAP,CAAY;AAAC,8BAAD;kBAAgB,aAAM,KAAI,OAAJ,EAAtB;gBAAmC,KAAnC;aAAZ,EADoB;AAEpB,mBAAO,IAAP,CAAY;AAAC,8BAAc,WAAW,MAA1B;2BAAiC,KAAI,QAAJ,IAAiB,MAAlD;gBAA0D,QAA1D;aAAZ,EAFoB;SAAxB,MAGO;AACH,mBAAO,IAAP,CAAY;AAAC,8BAAc,WAAW,MAA1B;2BAAiC,KAAI,QAAJ,IAAiB,MAAlD;gBAA0D,QAA1D;aAAZ,EADG;AAEH,mBAAO,IAAP,CAAY;AAAC,8BAAD;kBAAgB,aAAM,KAAI,OAAJ,EAAtB;gBAAmC,KAAnC;aAAZ,EAFG;SAHP;;;AANG,eAgBC;;cAAK,WAAW,SAAX,EAAL;YACK,MADL;SADJ,CAfG;KATP;CALgB;;AA0DpB,cAAc,YAAd,GAA6B;AACzB,aAAS,OAAT;AACA,eAAW,MAAX;CAFJ;;AAKA,cAAc,UAAd,GAA2B;AACvB,wBADuB;AAEvB,0BAFuB;AAGvB,4BAHuB;CAA3B;;kBAMe","file":"labeledbutton.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport elementType from 'react-prop-types/lib/elementType';\nimport Icon from './../icon/icon';\nimport Label from './../label/label';\nimport Button from './button';\nimport { validateClassProps } from '../../utilities';\n\nconst validProps = {\n    labeled: ['left', 'right']\n};\n\n/**\n * Returns default component for label\n * @param {string} type\n */\nfunction getDefaultLabelComponent(type) {\n    return (type === 'icon') ? LabeledButton.Components.Icon : LabeledButton.Components.Label; // eslint-disable-line\n}\n\n/**\n * Returns class name\n * @param props\n */\nfunction getClasses(props) {\n    let classes = {\n        ui: props.labelType !== 'icon', // no need to add ui since <Button> will add it\n        icon: props.labelType === 'icon',\n        button: props.labelType !== 'icon'\n    };\n    return validateClassProps(classes, props, validProps);\n}\n\n/**\n * Labeled button renders button with label, either text label or icon\n */\nlet LabeledButton = (props) => {\n    const { children, labeled, labelType, label, labelComponent, ...other } = props;\n    let LabelComponent = (labelComponent) ? labelComponent : getDefaultLabelComponent(labelType);\n\n\n    if (labelType === 'icon') {\n        // Easy markup, it's the standard button with labeled icon prefix, the icon order doesn't matter\n        other.className = classNames(other.className, getClasses(props));\n        return (\n            <LabeledButton.Components.Button {...other}>\n                <LabelComponent name={label}/>\n                {children}\n            </LabeledButton.Components.Button>\n        )\n    } else {\n        // Text labeled button, this is slightly harder, label order does matter, also need to be prefixed with <div>\n        const className = classNames(getClasses(props));\n        let markup = [];\n        /* eslint-disable react/jsx-max-props-per-line */\n        // Should be label basic by default?\n        if (labeled === 'left') {\n            markup.push(<LabelComponent basic key=\"label\">{label}</LabelComponent>);\n            markup.push(<LabeledButton.Components.Button key=\"button\" {...other}>{children}</LabeledButton.Components.Button>)\n        } else {\n            markup.push(<LabeledButton.Components.Button key=\"button\" {...other}>{children}</LabeledButton.Components.Button>);\n            markup.push(<LabelComponent basic key=\"label\">{label}</LabelComponent>);\n        }\n        /* eslint-enable react/jsx-max-props-per-line */\n        // TODO: Should allow to customize this div??\n        return (\n            <div className={className}>\n                {markup}\n            </div>\n        )\n    }\n\n};\n\nLabeledButton.propTypes = {\n    ...Button.propTypes,\n    /**\n     * Label position, default to right\n     */\n    labeled: React.PropTypes.oneOf(['left', 'right']),\n    /**\n     * Type of label, could be text label or icon\n     */\n    labelType: React.PropTypes.oneOf(['text', 'icon']),\n    /**\n     * Label, if given string will be used as label text or icon name (if labelType is icon).\n     */\n    label: React.PropTypes.string.isRequired,\n    /**\n     * Label component. Default will be Icon for labelType icon and Label for labelType label\n     */\n    labelComponent: elementType\n};\n\nLabeledButton.defaultProps = {\n    labeled: 'right',\n    labelType: 'text'\n};\n\nLabeledButton.Components = {\n    Icon: Icon,\n    Label: Label,\n    Button: Button\n};\n\nexport default LabeledButton;\n\n"]}