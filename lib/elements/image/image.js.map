{"version":3,"sources":["../../../src/components/elements/image/image.jsx"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAM,aAAa;AACf,aAAS,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,CAAT;AACA,aAAS,CAAC,OAAD,EAAU,MAAV,CAAT;AACA,YAAQ,CAAC,OAAD,EAAU,MAAV,CAAR;CAHE;;AAMN,SAAS,UAAT,CAAoB,KAApB,EAA2B,OAA3B,EAAoC;AAChC,QAAI,UAAU;;AAEV,YAAI,MAAM,cAAN,KAAyB,CAAC,QAAQ,YAAR,IAAyB,QAAQ,YAAR,IAAwB,MAAM,IAAN,CAA3E;AACJ,eAAO,MAAM,cAAN;;;AAGP,iBAAS,MAAM,OAAN;AACT,gBAAQ,MAAM,MAAN;AACR,kBAAU,MAAM,QAAN;AACV,kBAAU,MAAM,QAAN;AACV,kBAAU,MAAM,KAAN,KAAgB,UAAhB;AACV,iBAAS,MAAM,OAAN;AACT,eAAO,MAAM,KAAN;AACP,iBAAS,MAAM,KAAN,KAAgB,SAAhB;AACT,gBAAQ,MAAM,MAAN;KAdR,CAD4B;;AAkBhC,YAAQ,MAAM,KAAN,CAAR,GAAuB,CAAC,CAAC,MAAM,KAAN,CAlBO;AAmBhC,YAAQ,MAAM,IAAN,CAAR,GAAsB,CAAC,CAAC,MAAM,IAAN,CAnBQ;;AAqBhC,WAAO,mCAAmB,OAAnB,EAA4B,KAA5B,EAAmC,UAAnC,CAAP,CArBgC;CAApC;;;;;;;AA6BA,SAAS,iBAAT,CAA2B,OAA3B,EAAoC;AAChC,WAAQ,QAAQ,eAAR,IAA2B,QAAQ,YAAR,CADH;CAApC;;;;;AAOA,IAAI,QAAQ,SAAR,KAAQ,CAAC,KAAD,EAAQ,OAAR,EAAoB;QAExB,YAEA,MAFA,UAFwB;QAEb,WAEX,MAFW,SAFa;QAEH,iBAErB,MAFqB,eAFG;QAEa,UAErC,MAFqC,QAFb;QAEsB,SAE9C,MAF8C,OAFtB;QAE8B,WAEtD,MAFsD,SAF9B;QAEwC,WAEhE,MAFgE,SAFxC;QAGxB,QACA,MADA,MAHwB;QAGjB,UACP,MADO,QAHiB;QAGR,OAChB,MADgB,KAHQ;QAGF,SACtB,MADsB,OAHE;QAGM,MAC9B,MAD8B,IAHN;QAGW,QACnC,MADmC,MAHX;QAGkB,QAC1C,MAD0C,MAHlB;QAGyB,gBACjD,MADiD,cAHzB;;QAG2C,iCACnE,iLAJwB;;AAM5B,UAAM,SAAN,GAAkB,0BAAW,MAAM,SAAN,EAAiB,WAAW,KAAX,EAAkB,OAAlB,CAA5B,CAAlB,CAN4B;AAO5B,QAAI,iBAAiB,SAAjB,CAPwB;AAQ5B,QAAI,kBAAkB,OAAlB,KAA8B,aAA9B,EAA6C;AAC7C,YAAM,gBAAgB,OAAQ,aAAP,KAAyB,WAAzB,IAAwC,OAAO,aAAP,KAAyB,SAAzB,GAAsC,KAA/E,GAAuF,aAAvF,CADuB;AAE7C,eACI;AAAC,yBAAD;YAAmB,KAAnB;YACI;AAAC,8BAAD;kBAAgB,KAAK,GAAL,EAAhB;gBAA2B,QAA3B;aADJ;SADJ,CAF6C;KAAjD,MAOO;AACH,eACI;AAAC,0BAAD;yBAAoB,SAAO,KAAK,GAAL,GAA3B;YAAsC,QAAtC;SADJ,CADG;KAPP;CARQ;;AAiFZ,MAAM,YAAN,gBACO,uBAAa,YAAb;AACH,eAAW,KAAX;AACA,mBAAe,KAAf;EAHJ;;AAMA,MAAM,YAAN,GAAqB;AACjB,qBAAiB,gBAAM,SAAN,CAAgB,IAAhB;AACjB,kBAAc,gBAAM,SAAN,CAAgB,IAAhB;AAFG,CAArB;;kBAKe","file":"image.js","sourcesContent":["import React from 'react';\nimport elementType from 'react-prop-types/lib/elementType';\nimport { validateClassProps } from '../../utilities';\nimport classNames from 'classnames';\nimport DefaultProps from '../../defaultProps';\n\nconst validProps = {\n    aligned: ['top', 'middle', 'bottom'],\n    floated: ['right', 'left'],\n    spaced: ['right', 'left']\n};\n\nfunction getClasses(props, context) {\n    let classes = {\n        // Do not set ui class if image is items child, but set anyway is items child and should has size prop\n        ui: props.defaultClasses && (!context.isItemsChild || (context.isItemsChild && props.size)),\n        image: props.defaultClasses,\n        \n        // variations\n        aligned: props.aligned,\n        avatar: props.avatar,\n        bordered: props.bordered,\n        centered: props.centered,\n        circular: props.shape === 'circular',\n        floated: props.floated,\n        fluid: props.fluid,\n        rounded: props.shape === 'rounded',\n        spaced: props.spaced\n    };\n    \n    classes[props.state] = !!props.state;\n    classes[props.size] = !!props.size;\n    \n    return validateClassProps(classes, props, validProps);\n}\n\n/**\n * Return true if image should be forced wrapped into div\n * @param context\n * @returns {boolean}\n */\nfunction shouldWrapIntoDiv(context) {\n    return (context.isCommentsChild || context.isItemsChild);\n}\n\n/**\n * Just an image\n */\nlet Image = (props, context) => {\n    const { \n        component, children, defaultClasses, aligned, avatar, bordered, centered,\n        fluid, floated, size, spaced, src, state, shape, wrapComponent, ...other\n    } = props;\n    \n    other.className = classNames(other.className, getClasses(props, context));\n    let ImageComponent = component;\n    if (shouldWrapIntoDiv(context) || wrapComponent) {\n        const WrapComponent = (typeof wrapComponent === 'undefined' || typeof wrapComponent === 'boolean') ? 'div' : wrapComponent;\n        return (\n            <WrapComponent {...other}>\n                <ImageComponent src={src}>{children}</ImageComponent>\n            </WrapComponent>\n        );\n    } else {\n        return (\n            <ImageComponent {...other} src={src}>{children}</ImageComponent>\n        );\n    }\n};\n\nImage.propTypes = {\n    ...DefaultProps.propTypes,\n    /**\n     * An image can specify its vertical alignment\n     */\n    aligned: React.PropTypes.oneOf(['top', 'middle', 'bottom']),\n    /**\n     * An image may be formatted to appear inline with text as an avatar\n     */\n    avatar: React.PropTypes.bool,\n    /**\n     * An image may include a border to emphasize the edges of white or transparent content\n     */\n    bordered: React.PropTypes.bool,\n    /**\n     * An image can appear centered in a content block\n     */\n    centered: React.PropTypes.bool,\n    /**\n     * An image can take up the width of its container\n     */\n    fluid: React.PropTypes.bool,\n    /**\n     * An image can sit to the left or right of other content\n     */\n    floated: React.PropTypes.oneOf(['right', 'left']),\n    /**\n     * An image may appear at different sizes \n     */\n    size: React.PropTypes.string,\n    /**\n     * An image can specify that it needs an additional spacing to separate it from nearby content\n     */\n    spaced: React.PropTypes.oneOfType([\n        React.PropTypes.oneOf(['right', 'left']),\n        React.PropTypes.bool\n    ]),\n    /**\n     * Image src\n     */\n    src: React.PropTypes.string.isRequired,\n    /**\n     * Image shape\n     */\n    shape: React.PropTypes.oneOf(['circular', 'rounded']),\n    /**\n     * Image state, could be disabled or hidden\n     */\n    state: React.PropTypes.oneOf(['disabled', 'visible', 'hidden']),\n    /**\n     * Wrap image component under other component, for example <a/> or <div/>\n     * In this case this component will receive image classes instead\n     */\n    wrapComponent: React.PropTypes.oneOfType([\n        React.PropTypes.bool,\n        elementType\n    ])\n};\n\nImage.defaultProps = {\n    ...DefaultProps.defaultProps,\n    component: 'img',\n    wrapComponent: false\n};\n\nImage.contextTypes = {\n    isCommentsChild: React.PropTypes.bool, // Image in Comment should be wrapper into <div/>\n    isItemsChild: React.PropTypes.bool // Image in Items should be wrapped into <div/>\n};\n\nexport default Image;\n"]}