{"version":3,"sources":["../../../src/components/elements/input/input.jsx"],"names":[],"mappings":"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","file":"input.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport elementType from 'react-prop-types/lib/elementType';\nimport DefaultProps from '../../defaultProps';\nimport Icon from './../icon/icon';\nimport Label from './../label/label';\n\nfunction getClasses(props) {\n    let classes = {\n        ui: props.defaultClasses,\n        input: props.defaultClasses,\n        \n        fluid: props.fluid,\n        inverted: props.inverted,\n        transparent: props.transparent\n    };\n    classes[props.size] = !!props.size;\n    // Loading state should add icon\n    if (props.state && props.state === 'loading') {\n        classes['icon'] = true;\n    }\n    classes[props.state] = !!props.state;\n    \n    // action input\n    if (props.actionComponent) {\n        classes[props.actionPosition] = true;\n        classes['action'] = true;\n    }\n    // Icon input\n    if (props.icon) {\n        classes[props.iconPosition] = true;\n        classes['icon'] = true;\n    }\n    // Labeled input\n    if (props.label) {\n        classes[props.labelPosition] = true;\n        classes['labeled'] = true;\n    }\n    return classes;\n}\n\n/**\n * Controlled basic input\n */\nlet Input = (props) => {\n    const {\n        component, children, className, defaultClasses, style, actionComponent, actionPosition, fluid, icon, iconPosition, iconComponent,\n        inverted, label, labelComponent, labelPosition, placeholder, size, state, transparent, value, ...other\n    } = props;\n    \n    const wrapperClassName = classNames(className, getClasses(props));\n    const InputComponent = component;\n    const IconComponent = iconComponent || Input.Components.Icon;\n    const LabelComponent = labelComponent || Input.Components.Label;\n    const ActionComponent = actionComponent;\n    \n    return (\n        <div className={wrapperClassName} style={style}>\n            {/* First should be action in left position */}\n            {actionComponent && actionPosition === 'left' && <ActionComponent />}\n            {/* Second should be label in left or left corner position */}\n            {label && (labelPosition === 'left' || labelPosition === 'left corner') && \n            <LabelComponent corner={labelPosition === 'left corner' ? 'left' : null}>\n                {label}\n            </LabelComponent>}\n            {/* Next input itself */}\n            <InputComponent type=\"text\" {...other} value={value} placeholder={placeholder}/>\n            {/* Icon, markup doesn't matter for placement */}\n            {/* Always render search icon for loading state regardless of settings */}\n            {(state && state === 'loading') ? <Icon name=\"search\" /> :\n                (icon && <IconComponent name={icon}/>)\n            }\n            {/* Label in right position */}\n            {label && (labelPosition === 'right' || labelPosition === 'right corner') && \n            <LabelComponent corner={labelPosition === 'right corner' ? 'right' : null}>\n                {label}\n            </LabelComponent>}\n            {/* Action in right position */}\n            {actionComponent && actionPosition === 'right' && <ActionComponent/>}\n            {/* Any children goes after all stuff */}\n            {children}\n        </div>\n    )\n};\n\nInput.propTypes = {\n    ...DefaultProps.propTypes,\n    /**\n     * Action component\n     */\n    actionComponent: elementType,\n    /**\n     * Action position\n     */\n    actionPosition: React.PropTypes.oneOf(['left', 'right']),\n    /**\n     * An input can take the size of its container\n     */\n    fluid: React.PropTypes.bool,\n    /**\n     * Render icon\n     */\n    icon: React.PropTypes.string,\n    /**\n     * Icon position\n     */\n    iconPosition: React.PropTypes.oneOf(['left', 'right']),\n    /**\n     * Pass custom icon component\n     */\n    iconComponent: elementType,\n    /**\n     * Inverted input\n     */\n    inverted: React.PropTypes.bool,\n    /**\n     * Render label for input\n     */\n    label: React.PropTypes.string,\n    /**\n     * Pass custom label component\n     */\n    labelComponent: elementType,\n    /**\n     * Label position\n     */\n    labelPosition: React.PropTypes.oneOf(['left', 'right', 'left corner', 'right corner']),\n    /**\n     * Input placeholder\n     */\n    placeholder: React.PropTypes.string,\n    /**\n     * Input size\n     */\n    size: React.PropTypes.oneOf(['mini', 'tiny', 'small', 'medium', 'large', 'big', 'huge', 'massive']),\n    /**\n     * Input state\n     */\n    state: React.PropTypes.oneOf(['focus', 'loading', 'disabled', 'error']),\n    /**\n     * Render transparent input\n     */\n    transparent: React.PropTypes.bool,\n    /**\n     * Input value\n     */\n    value: React.PropTypes.string\n};\n\nInput.defaultProps = {\n    ...DefaultProps.defaultProps,\n    component: 'input',\n    iconPosition: 'right',\n    labelPosition: 'left',\n    actionPosition: 'right'\n};\n\nInput.Components = {\n    Icon: Icon,\n    Label: Label\n};\n\nexport default Input;\n"]}