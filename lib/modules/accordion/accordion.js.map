{"version":3,"sources":["../../../src/components/modules/accordion/accordion.jsx"],"names":[],"mappings":"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","file":"accordion.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport Transition from 'react-motion-ui-pack';\nimport DefaultProps from '../../defaultProps';\n\n/**\n * Controlled accordion\n */\nexport default class Accordion extends React.Component {\n    static propTypes = {\n        ...DefaultProps.propTypes,\n        /**\n         * Current visible content. Strings and numbers are accepted\n         */\n        activeIndexes: React.PropTypes.arrayOf(React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number])),\n        /**\n         * React.PropTypes.arrayOf(React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]))\n         */\n        fluid: React.PropTypes.bool,\n        /**\n         * An accordion can be formatted to appear on dark backgrounds\n         */\n        inverted: React.PropTypes.bool,\n        /**\n         * Callback when accordion wants to be changed\n         */\n        onAccordionChange: React.PropTypes.func,\n        /**\n         * A styled accordion adds basic formatting\n         */\n        styled: React.PropTypes.bool\n    };\n\n    static contextTypes = {\n        isAccordionChild: React.PropTypes.bool\n    };\n    \n    static childContextTypes = {\n        isAccordionChild: React.PropTypes.bool\n    };\n\n\n    static defaultProps = {\n        ...DefaultProps.defaultProps,\n        activeIndexes: [],\n        onAccordionChange: () => { }\n    };\n\n    constructor(props) {\n        super(props);\n        // Disallow to override animation style for now, since paddingTop and paddingBottom need to be animated too\n        // I don't want to bother with dealing with unit measures for now, so just hardcode semantic EM values here and in body component\n        this.enterAnimation = {\n            height: {\n                val: 'auto',\n                stiffness: 300,\n                damping: 40,\n                precision: 0.1\n            },\n            paddingTop: {\n                val: 0.5,\n                stiffness: 300,\n                damping: 40,\n                precision: 0.2\n            }\n        };\n        this.enterAnimation.paddingBottom = {\n            val: (props.styled) ? 1.5 : 1,\n            stiffness: 300,\n            damping: 40,\n            precision: 0.3\n        }\n        // this.enterAnimation.paddingBottom = (props.styled) ? 1.5 : 1; // em\n        // this.enterAnimation.paddingBottom = 1.0; // em\n        this.leaveAnimation = {\n            height: 0,\n            paddingTop: 0,\n            paddingBottom: 0\n        }\n    }\n\n    getChildContext() {\n        return {\n            isAccordionChild: true\n        };\n    }\n\n\n    /**\n     * Accordion title click handler\n     * \n     * @param {number|string} index Index\n     * @param {React.MouseEvent} evt Mouse event\n     */\n    onAccordionTitleClick(index, evt) {\n        evt.preventDefault();\n        this.props.onAccordionChange(index);\n    }\n\n    /**\n     * Process children. Skips non active content\n     * \n     * @returns Children\n     */\n    renderChildren() {\n        let processNextContentChild = false;\n        let lastActiveIndex = null;\n\n        // not using child.type checking because these will fail if using some kind of HOC component\n        return React.Children.map(this.props.children, (child => {\n            if (child.props.index) {\n                // This is accordion title\n                let active = false;\n                if (this.props.activeIndexes.indexOf(child.props.index) !== -1) {\n                    // It should be active\n                    // set processing flags\n                    processNextContentChild = true;\n                    lastActiveIndex = child.props.index;\n                    active = true;\n                }\n                return React.cloneElement(child, {\n                    active: active,\n                    key: child.key ? child.key : child.props.index,\n                    initialStyle: child.props.style, // Set original passed style, component will use it instead of style\n                    onClick: this.onAccordionTitleClick.bind(this, child.props.index)\n                });\n            } else if (processNextContentChild && lastActiveIndex !== null) {\n                // reset index flag\n                lastActiveIndex = null;\n                // reset processing flag\n                processNextContentChild = false;\n                return React.cloneElement(child, {\n                    active: true,\n                    key: child.key ? child.key : `content-${lastActiveIndex}`,\n                    style: { ...child.props.style, overflow: 'hidden' }\n                });\n            }\n        }));\n    }\n\n    render() {\n        const {\n            component, children, defaultClasses, activeIndexes, fluid, inverted, onAccordionChange, styled, ...other\n        } = this.props;\n        const newChildren = this.renderChildren();\n        other.className = classNames(other.className, this.getClasses());\n        return (\n            <Transition component={component}\n                enter={this.enterAnimation}\n                leave={this.leaveAnimation}\n                props={other}\n            >\n                {newChildren}\n            </Transition>\n        )\n    }\n\n    getClasses() {\n        return {\n            // default\n            ui: this.props.defaultClasses && !this.context.isAccordionChild,\n\n            // positioning\n\n            // types\n            styled: this.props.styled,\n\n            // variations\n            fluid: this.props.fluid,\n            inverted: this.props.inverted,\n\n            // component\n            accordion: this.props.defaultClasses\n        }\n    }\n}\n"]}