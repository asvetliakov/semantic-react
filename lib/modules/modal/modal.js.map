{"version":3,"sources":["../../../src/components/modules/modal/modal.jsx"],"names":[],"mappings":"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","file":"modal.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Transition from 'react-motion-ui-pack';\nimport Portal from 'react-portal';\nimport EventListener from 'react-event-listener';\nimport shallowCompare from 'react-addons-shallow-compare';\nimport { isNodeInRoot } from '../../utilities';\nimport Dimmer from '../dimmer/dimmer';\nimport ModalElement from './modalelement';\n\n/**\n * Modal is modal\n */\nexport default class Modal extends React.Component {\n    static propTypes = {\n        ...ModalElement.propTypes,\n        /**\n         * Start animation\n         */\n        enterAnimation: React.PropTypes.object,\n        /**\n         * Leave animation\n         */\n        leaveAnimation: React.PropTypes.object,\n        /**\n         * Dimmer variations\n         */\n        dimmed: React.PropTypes.oneOf(['blurring', 'inverted', 'blurring inverted']),\n        /**\n         * Callback from outside modal click\n         */\n        onRequestClose: React.PropTypes.func,\n        /**\n         * Callback for modal opening\n         */\n        onModalOpened: React.PropTypes.func,\n        /**\n         * Callback for modal closing\n         */\n        onModalClosed: React.PropTypes.func,\n        /**\n         * Overlay zIndex\n         */\n        zIndex: React.PropTypes.number\n    };\n\n\n    static childContextTypes = {\n        isModalChild: React.PropTypes.bool\n    };\n    \n    static defaultProps = {\n        ...ModalElement.defaultProps,\n        enterAnimation: {\n            scale: 1,\n            opacity: 1\n        },\n        leaveAnimation: {\n            scale: 0.5,\n            opacity: 0.5\n        },\n        onRequestClose: () => { },\n        onModalOpened: () => { },\n        onModalClosed: () => { },\n        zIndex: 1000\n    };\n\n    /* eslint-disable */\n    static Components = {\n        Dimmer: Dimmer,\n        ModalElement: ModalElement\n    };\n    /* eslint-enable */\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            active: props.active,\n            closing: false,\n            positionTop: 0,\n            scrolling: false\n        };\n\n        this.modal = null;\n    }\n\n    getChildContext() {\n        return {\n            isModalChild: true\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.active) {\n            // Set initial position for modal\n            this.setPlacement();\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.active !== this.state.active) {\n            if (nextProps.active) {\n                this.setState({\n                    active: true,\n                    closing: false\n                });\n            } else {\n                // need to wait some time to play animation, otherwise it will kill portal\n                this.setState({\n                    closing: true\n                });\n                setTimeout(() => {\n                    this.setState({\n                        closing: false,\n                        active: false\n                    })\n                }, 500);\n            }\n        }\n    }\n    \n    \n    shouldComponentUpdate(nextProps, nextState) {\n        // since we're changing state immediately after componentDidUpdate we need to prevent re-rendering loop\n        return shallowCompare(this, nextProps, nextState);\n    }\n\n    componentDidUpdate() {\n        // Set modal position after update\n        this.setPlacement();\n    }\n\n    onPressEsc(event) {\n        if (event.keyCode !== 27) {\n            return;\n        }\n\n        event.stopPropagation();\n        this.props.onRequestClose(event);\n    }\n    \n    onOutsideClick(event) {\n        if (!this.state.active || this.state.closing) {\n            return;\n        }\n        if (!this.modal) {\n            return;\n        }\n        if (isNodeInRoot(event.target, ReactDOM.findDOMNode(this.modal))) {\n            return;\n        }\n        event.stopPropagation();\n        this.props.onRequestClose(event);\n    }\n\n    render() {\n\n        const { \n            component, enterAnimation, leaveAnimation, children, dimmed, onOutsideClick, style, zIndex, \n            onModalOpened, onModalClosed, ...other \n        } = this.props;\n\n        // Apply layer to portal to prevent clicking outside\n        const portalStyle = {\n            position: 'fixed',\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            zIndex: zIndex\n        };\n\n        const modalPosition = {\n            top: this.state.positionTop,\n            position: 'fixed'\n        };\n\n        const modalStyle = style ? { ...style, ...modalPosition } : modalPosition;\n        \n        return (\n            <Portal isOpened={this.state.active || (!this.state.active && this.state.closing)}\n                    style={portalStyle}\n                    onOpen={onModalOpened}\n                    onClose={onModalClosed}\n            >\n                    <Modal.Components.Dimmer active={this.state.active}\n                        page\n                        noWrapChildren\n                        className=\"modals\"\n                    >\n                    <EventListener elementName=\"document\"\n                                   onKeyDown={this.onPressEsc.bind(this)}\n                                   onMouseDown={this.onOutsideClick.bind(this)}\n                                   onTouchStart={this.onOutsideClick.bind(this)}/>\n                        <Transition component={false}\n                            enter={enterAnimation}\n                            leave={leaveAnimation}\n                        >\n                            {(this.state.active && !this.state.closing) &&\n                                <Modal.Components.ModalElement {...other}\n                                    ref={ref => this.modal = ref}\n                                    key=\"modal\"\n                                    scrolling={this.state.scrolling}\n                                    style={modalStyle}\n                                >\n                                    {children}\n                                </Modal.Components.ModalElement>\n                            }\n                        </Transition>    \n                    </Modal.Components.Dimmer>\n            </Portal>\n        );\n    }\n\n    /**\n     * Calculate modal position to center on the screen\n     */\n    setPlacement() {\n        if (!this.state.active || this.state.closing) {\n            return;\n        }\n        if (!this.modal) {\n            return;\n        }\n\n        const htmlElement = ReactDOM.findDOMNode(this.modal);\n        // get element height\n        if (htmlElement) {\n            const height = htmlElement.offsetHeight;\n\n            // Modal is too big, set the scrolling state then\n            if (height > window.innerHeight) {\n                // semantic sets top margin for scrolling modal, \n                // so no need to bother with position \n                this.setState({\n                    positionTop: 0,\n                    scrolling: true\n                });\n            } else {\n                const top = window.innerHeight / 2 - height / 2;\n                this.setState({\n                    positionTop: top,\n                    scrolling: false\n                });\n            }\n        }\n\n    }\n}\n"]}