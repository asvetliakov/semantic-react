{"version":3,"sources":["../../../src/components/modules/modal/modalelement.jsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;IAMqB;;;;;;;;;;;iCA8BR;yBACsF,KAAK,KAAL,CADtF;gBACG,6BADH;gBACc,uCADd;gBAC8B,2BAD9B;gBACwC,uBADxC;gBACgD,qBADhD;gBACuD,+BADvD;gBACmE,mBADnE;;gBAC4E,+HAD5E;;AAEL,gBAAI,YAAY,SAAZ,CAFC;AAGL,kBAAM,SAAN,GAAkB,0BAAW,MAAM,SAAN,EAAiB,KAAK,UAAL,EAA5B,CAAlB,CAHK;AAIL,mBACI;AAAC,yBAAD;gBAAe,KAAf;gBACK,QADL;aADJ,CAJK;;;;qCAWI;AACT,gBAAI,UAAU;AACV,oBAAI,KAAK,KAAL,CAAW,cAAX;AACJ,wBAAQ,KAAK,KAAL,CAAW,MAAX;AACR,uBAAO,KAAK,KAAL,CAAW,KAAX;AACP,4BAAY,KAAK,KAAL,CAAW,UAAX;AACZ,2BAAW,KAAK,KAAL,CAAW,SAAX;AACX,uBAAO,KAAK,KAAL,CAAW,cAAX;aANP,CADK;AAST,oBAAQ,KAAK,KAAL,CAAW,IAAX,CAAR,GAA2B,CAAC,CAAC,KAAK,KAAL,CAAW,IAAX,CATpB;AAUT,mBAAO,OAAP,CAVS;;;;WAzCI;EAAqB,gBAAM,SAAN,UAyB/B,4BACA,uBAAa,YAAb;AACH,YAAQ,IAAR;;kBA3Ba","file":"modalelement.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport DefaultProps from './../../defaultProps';\r\n\r\n/**\r\n * Modal element\r\n */\r\n// Need to be statefull component because Modal uses ref\r\nexport default class ModalElement extends React.Component {\r\n    static propTypes = {\r\n        ...DefaultProps.propTypes,\r\n        /**\r\n         * Should be modal visible\r\n         */\r\n        active: React.PropTypes.bool,\r\n        /**\r\n         * A modal can reduce its complexity\r\n         */\r\n        basic: React.PropTypes.bool,\r\n        /**\r\n         * A modal can use the entire size of the screen\r\n         */\r\n        fullscreen: React.PropTypes.bool,\r\n        /**\r\n         * Scrolling content\r\n         */\r\n        scrolling: React.PropTypes.bool,\r\n        /**\r\n         * A modal can vary in size\r\n         */\r\n        size: React.PropTypes.string\r\n    };\r\n\r\n    static defaultProps = {\r\n        ...DefaultProps.defaultProps,\r\n        active: true\r\n    };\r\n\r\n    render() {\r\n        const { component, defaultClasses, children, active, basic, fullscreen, size, ...other } = this.props;\r\n        let Component = component;\r\n        other.className = classNames(other.className, this.getClasses());\r\n        return (\r\n            <Component {...other}>\r\n                {children}\r\n            </Component>\r\n        );\r\n    }\r\n\r\n    getClasses() {\r\n        let classes = {\r\n            ui: this.props.defaultClasses,\r\n            active: this.props.active,\r\n            basic: this.props.basic,\r\n            fullscreen: this.props.fullscreen,\r\n            scrolling: this.props.scrolling,\r\n            modal: this.props.defaultClasses\r\n        };\r\n        classes[this.props.size] = !!this.props.size;\r\n        return classes;\r\n    }\r\n}\r\n"]}